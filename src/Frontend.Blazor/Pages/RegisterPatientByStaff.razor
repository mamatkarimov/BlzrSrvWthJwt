@page "/staff/register-patient"
@* @attribute [Authorize(Roles = "Receptionist,Administrator, Admin")] *@
@using System.Security.Claims
@using Frontend.Blazor.Data
@using Frontend.Blazor.Models
@inject AuthenticationStateProvider AuthStateProvider
@inject PatientService PatientService
@inject NavigationManager Navigation

<EditForm Model="@InputModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label>First Name*</label>
                <InputText @bind-Value="InputModel.FirstName" class="form-control" />
                <ValidationMessage For="@(() => InputModel.FirstName)" />
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label>Last Name*</label>
                <InputText @bind-Value="InputModel.LastName" class="form-control" />
                <ValidationMessage For="@(() => InputModel.LastName)" />
            </div>
        </div>
    </div>
    
    <div class="form-group">
        <label>Date of Birth</label>
        <InputDate class="form-control" @bind-Value="InputModel.DateOfBirth" />
        <ValidationMessage For="@(() => InputModel.DateOfBirth)" />
    </div>

    <div class="form-group">
        <label>Gender</label>
        <InputSelect class="form-control" @bind-Value="InputModel.Gender">
            <option value="">Select Gender</option>
            <option value="M">Male</option>
            <option value="F">Female</option>
            <option value="O">Other</option>
            <option value="U">Unknown</option>
        </InputSelect>
        <ValidationMessage For="@(() => InputModel.Gender)" />
    </div>

    <div class="form-group">
        <label>Email</label>
        <InputText class="form-control" @bind-Value="InputModel.Email" />
        <ValidationMessage For="@(() => InputModel.Email)" />
    </div>

    <div class="form-group">
        <label>Username</label>
        <InputText class="form-control" @bind-Value="InputModel.UserName" />
        <ValidationMessage For="@(() => InputModel.UserName)" />
    </div>

    <div class="form-group">
        <label>Password</label>
        <InputText type="password" class="form-control" @bind-Value="InputModel.Password" />
        <ValidationMessage For="@(() => InputModel.Password)" />
    </div>

    <div class="form-group">
        <label>Confirm Password</label>
        <InputText type="password" class="form-control" @bind-Value="InputModel.ConfirmPassword" />
        <ValidationMessage For="@(() => InputModel.ConfirmPassword)" />
    </div>   

    <button type="submit" class="btn btn-primary" disabled="@isBusy">
        @if (isBusy)
        {
            <span class="spinner-border spinner-border-sm" role="status"></span>
            <span> Registering...</span>
        }
        else
        {
            <span>Register Patient</span>
        }
    </button>
</EditForm>

@if (registrationResult != null)
{
    <div class="mt-4 alert alert-success">
        <h4>Registration Successful</h4>
        <p>Patient ID: @registrationResult.PatientId</p>
        <p>Username: @registrationResult.Username</p>
        <p>Temporary Password: @registrationResult.TemporaryPassword</p>

       
    </div>
}

@code {
    private PatientRegisterInput InputModel { get; } = new();
    private bool isBusy = false;
    private PatientRegistrationDto registrationResult;

    private async Task HandleValidSubmit()
    {
        isBusy = true;

        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);

            var result = await PatientService.RegisterPatientAsync(InputModel);

            if (result.Success)
            {
                registrationResult = result.Data;
            }
        }
        finally
        {
            isBusy = false;
        }
    }

   
}