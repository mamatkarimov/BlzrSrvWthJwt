@page "/register-patient"
@using System.ComponentModel.DataAnnotations
@using Frontend.Blazor.Data
@using Frontend.Blazor.Models
@inject PatientService PatientService
@inject NavigationManager Navigation

<h3>Patient Registration</h3>

<EditForm Model="@RegisterModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>First Name</label>
        <InputText class="form-control" @bind-Value="RegisterModel.FirstName" />
        <ValidationMessage For="@(() => RegisterModel.FirstName)" />
    </div>

    <div class="form-group">
        <label>Last Name</label>
        <InputText class="form-control" @bind-Value="RegisterModel.LastName" />
        <ValidationMessage For="@(() => RegisterModel.LastName)" />
    </div>

    <div class="form-group">
        <label>Date of Birth</label>
        <InputDate class="form-control" @bind-Value="RegisterModel.DateOfBirth" />
        <ValidationMessage For="@(() => RegisterModel.DateOfBirth)" />
    </div>

    <div class="form-group">
        <label>Gender</label>
        <InputSelect class="form-control" @bind-Value="RegisterModel.Gender">
            <option value="">Select Gender</option>
            <option value="M">Male</option>
            <option value="F">Female</option>
            <option value="O">Other</option>
            <option value="U">Unknown</option>
        </InputSelect>
        <ValidationMessage For="@(() => RegisterModel.Gender)" />
    </div>

    <div class="form-group">
        <label>Email</label>
        <InputText class="form-control" @bind-Value="RegisterModel.Email" />
        <ValidationMessage For="@(() => RegisterModel.Email)" />
    </div>

    <div class="form-group">
        <label>Username</label>
        <InputText class="form-control" @bind-Value="RegisterModel.UserName" />
        <ValidationMessage For="@(() => RegisterModel.UserName)" />
    </div>

    <div class="form-group">
        <label>Password</label>
        <InputText type="password" class="form-control" @bind-Value="RegisterModel.Password" />
        <ValidationMessage For="@(() => RegisterModel.Password)" />
    </div>

    <div class="form-group">
        <label>Confirm Password</label>
        <InputText type="password" class="form-control" @bind-Value="RegisterModel.ConfirmPassword" />
        <ValidationMessage For="@(() => RegisterModel.ConfirmPassword)" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(Message))
{
    @if (!string.IsNullOrEmpty(Message) || (!RegistrationResult?.Success ?? false))
    {
        <div class="alert @(IsError ? "alert-danger" : "alert-success")">
            @Message
            @if (RegistrationResult?.ErrorMessage!=null)
            {
                <ul>
                    @foreach (var error in RegistrationResult.ErrorMessage)
                    {
                        <li>@error</li>
                    }
                </ul>
            }
            @if (RequiresLogin)
            {
                <button class="btn btn-link" @onclick="RedirectToLogin">Login Now</button>
            }
        </div>
    }
}

@code {
    private PatientRegisterInput RegisterModel { get; set; } = new();
    private string Message { get; set; }
    private bool IsError { get; set; }
    private bool RequiresLogin { get; set; }
    private RegistrationResult RegistrationResult { get; set; } = new();

    private async Task HandleValidSubmit()
    {
        var result = await PatientService.RegisterPatientAsync(RegisterModel);

        if (result.Success)
        {
            Message = "Registration successful!";
            IsError = false;
            await Task.Delay(2000);
            Navigation.NavigateTo("/");
        }
        else
        {
            Message = result.Error;
            IsError = true;            
        }
    }

    private void RedirectToLogin()
    {
        Navigation.NavigateTo("/login", new NavigationOptions
        {
            HistoryEntryState = "from-registration"
        });
    }


   
}