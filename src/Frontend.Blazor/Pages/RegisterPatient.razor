@page "/register-patient"
@using System.ComponentModel.DataAnnotations
@using Frontend.Blazor.Data
@using Frontend.Blazor.Models
@inject PatientService PatientService
@inject NavigationManager Navigation

<h3>Patient Registration</h3>

<EditForm Model="@RegisterModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>First Name</label>
        <InputText class="form-control" @bind-Value="RegisterModel.FirstName" />
        <ValidationMessage For="@(() => RegisterModel.FirstName)" />
    </div>

    <div class="form-group">
        <label>Last Name</label>
        <InputText class="form-control" @bind-Value="RegisterModel.LastName" />
        <ValidationMessage For="@(() => RegisterModel.LastName)" />
    </div>

    <div class="form-group">
        <label>Date of Birth</label>
        <InputDate class="form-control" @bind-Value="RegisterModel.DateOfBirth" />
        <ValidationMessage For="@(() => RegisterModel.DateOfBirth)" />
    </div>

    <div class="form-group">
        <label>Gender</label>
        <InputSelect class="form-control" @bind-Value="RegisterModel.Gender">
            <option value="">Select Gender</option>
            <option value="M">Male</option>
            <option value="F">Female</option>
            <option value="O">Other</option>
            <option value="U">Unknown</option>
        </InputSelect>
        <ValidationMessage For="@(() => RegisterModel.Gender)" />
    </div>

    <div class="form-group">
        <label>Email</label>
        <InputText class="form-control" @bind-Value="RegisterModel.Email" />
        <ValidationMessage For="@(() => RegisterModel.Email)" />
    </div>

    <div class="form-group">
        <label>Username</label>
        <InputText class="form-control" @bind-Value="RegisterModel.UserName" />
        <ValidationMessage For="@(() => RegisterModel.UserName)" />
    </div>

    <div class="form-group">
        <label>Password</label>
        <InputText type="password" class="form-control" @bind-Value="RegisterModel.Password" />
        <ValidationMessage For="@(() => RegisterModel.Password)" />
    </div>

    <div class="form-group">
        <label>Confirm Password</label>
        <InputText type="password" class="form-control" @bind-Value="RegisterModel.ConfirmPassword" />
        <ValidationMessage For="@(() => RegisterModel.ConfirmPassword)" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert @(IsError ? "alert-danger" : "alert-success")">
        @Message
        @if (RequiresLogin)
        {
            <button class="btn btn-link" @onclick="RedirectToLogin">Login Now</button>
        }
    </div>
}

@code {
    private PatientRegisterInput RegisterModel { get; set; } = new();
    private string Message { get; set; }
    private bool IsError { get; set; }
    private bool RequiresLogin { get; set; }

    private async Task HandleValidSubmit()
    {
        var result = await PatientService.RegisterPatientAsync(RegisterModel);

        if (result.Success)
        {
            Message = "Registration successful!";
            IsError = false;
            await Task.Delay(2000);
            Navigation.NavigateTo("/");
        }
        else
        {
            Message = result.ErrorMessage;
            IsError = true;
            RequiresLogin = result.RequiresLogin;
        }
    }

    private void RedirectToLogin()
    {
        Navigation.NavigateTo("/login", new NavigationOptions
        {
            HistoryEntryState = "from-registration"
        });
    }


    public class PatientRegisterInput
    {
        [Required(ErrorMessage = "First name is required")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Last name is required")]
        public string LastName { get; set; }

        [Required(ErrorMessage = "Date of birth is required")]
        public DateTime DateOfBirth { get; set; } = DateTime.Today.AddYears(-18);

        [Required(ErrorMessage = "Gender is required")]
        public string Gender { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Username is required")]
        public string UserName { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirm password is required")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; }
    }
}